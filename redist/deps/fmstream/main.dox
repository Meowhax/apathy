/*! \mainpage
 *
 * \section intro_sec Introduction
 * <p>File mapping is the association of a file's contents with a portion of the virtual address space of a process. The system creates a file mapping object (also known as a section object) to maintain this association. A file view is the portion of virtual address space that a process uses to access the file's contents. File mapping allows the process to use both random input and output (I/O) and sequential I/O. It also allows the process to work efficiently with a large data file, such as a database, without having to map the whole file into memory. Multiple processes can also use memory-mapped files to share data.</p>
 * <p>Processes read from and write to the file view using pointers, just as they would with dynamically allocated memory. The use of file mapping improves efficiency because the file resides on disk, but the file view resides in memory.</p>
 * <p>The following illustration shows the relationship between the file on disk, a file mapping object, and a file view.<br><img src="fm.png" title="File mapping"></p>
 * <p>The file on disk can be any file that you want to map into memory, or it can be the system page file. The file mapping object can consist of all or only part of the file. It is backed by the file on disk. This means that when the system swaps out pages of the file mapping object, any changes made to the file mapping object are written to the file. When the pages of the file mapping object are swapped back in, they are restored from the file.</p>
 * <p>A file view can consist of all or only part of the file mapping object. A process manipulates the file through the file views. A process can create multiple views for a file mapping object. The file views created by each process reside in the virtual address space of that process. When the process needs data from a portion of the file other than what is in the current file view, it can unmap the current file view, then create a new file view.</p>
 * <p>When multiple processes use the same file mapping object to create views for a local file, the data is coherent. That is, the views contain identical copies of the file on disk.</p>
 *
 * \section usage_sec Usage
 * \ref fmstream provides a high-level interface to read/write data from/to memory-mapped files as input/output streams. It interfaces a file-based streambuffer (\ref filemappingbuf) with the high-level interface of <a href="http://en.cppreference.com/w/cpp/io/basic_iostream" target="_blank">std::iostream</a>. \ref fmstream can be used in place of <a href="http://en.cppreference.com/w/cpp/io/basic_fstream" target="_blank">std::fstream</a> or <a href="http://en.cppreference.com/w/cpp/io/basic_ofstream" target="_blank">std::ofstream</a>.
 * 
 * \ref ifmstream provides a high-level interface to read data from memory-mapped files as input streams. It interfaces a file-based streambuffer (\ref filemappingbuf) with the high-level interface of <a href="http://en.cppreference.com/w/cpp/io/basic_istream" target="_blank">std::istream</a>. \ref ifmstream can be used in place of <a href="http://en.cppreference.com/w/cpp/io/basic_ifstream" target="_blank">std::ifstream</a>.
 *
 * \section download_sec Download
 * Download source code on SourceForge : <a href="http://sourceforge.net/projects/fmstream/" target="_blank">http://sourceforge.net/projects/fmstream/</a>
 *
 * \section license_sec License
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the author nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * \copyright &copy; 2013, Benichou Software.
 */
